;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-beginner-abbr-reader.ss" "lang")((modname |prelab7 - 3|) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f ())))

;; Simple file systems, model 3:

(define-struct file (n s c))
;; File is (make-file String Natural String)
;; interp. n is file name, s is size, c represents the contents

(define-struct dir (n dirs files))
;; Directory (Dir) is (make-dir String ListOfDir ListOfFile)
;; interp. n is the name of the directory
;;         dirs is the sub-directories
;;         files is the files in the directory

;; ListOfDir is one of:
;;  - empty
;;  - (cons Dir ListOfDir)

;; ListOfFile is one of:
;;  - empty
;;  - (cons File ListOfFile)


;; PRE-LAB EXERCISES:
;;
;; (1) Define at least 2 examples of File and 6 examples of Dir here.
;;     As usual, start with a base case, make sure to have examples
;;     at least 2 deep and 2 wide.
(define file1 (make-file "file1" 1 "pics"))
(define file2 (make-file "file2" 2 "documents"))
(define dir1 (make-dir "pics" empty empty))
(define dir2 (make-dir "documents" (cons (make-dir "school" empty empty)
                                         empty) empty))
(define dir3 (make-dir "movies" (cons 
                                 (make-dir "drama" 
                                           (cons (make-dir "english" empty
                                                           (cons (make-file "movie1" 999 "none")
                                                                 empty))
                                                 empty)
                                           (cons (make-file "movie2" 888 "none") empty))
                                 empty)
                       empty))
(define dir4 (make-dir "music" 
                       (cons
                        (make-dir "english"
                                  (cons (make-dir "pop"
                                                  empty
                                                  (cons (make-file "song1" 100 "none")
                                                        empty)) empty)
                                  (cons (make-file "song2" 200 "none")
                                        empty))
                        (cons (make-dir "kpop"
                                        empty
                                        (cons (make-file "song3" 300 "none")
                                              empty))
                              empty))
                       empty))
(define dir5 (make-dir "homework"
                       (cons
                        (make-dir "cpsc"
                                  (cons (make-dir "pset"
                                                  empty
                                                  (cons (make-file "pset1" 10 "none")
                                                        (cons (make-file "pset2" 20 "none")
                                                              empty)))
                                        (cons (make-dir "lab"
                                                        empty
                                                        (cons (make-file "lab1" 10 "none")
                                                              empty))
                                              empty))
                                  empty)
                        empty)
                       empty)) 
(define dir6 (make-dir "games"
                       (cons
                        (make-dir "fallout3"
                                  (cons (make-dir "shaders"
                                                  empty
                                                  (cons (make-file "shader1" 1 "none")
                                                        (cons (make-file "shader2" 2 "none")
                                                              (cons (make-file "shader3" 3 "none")
                                                                    empty))))
                                        empty)
                                  (cons (make-file "flout.exe" 1 "none")
                                        empty))
                        empty)
                       (cons (make-file "solitaire" 1 "empty")
                             empty)))


;; (2) Assume you are in the process of defining a 1 argument function
;;     operating on a Dir. Write the template for that function here.
;;     Be sure to include templates for all types involved in mutual
;;     reference cycles.
;;
(define (fn-for-dir dir)
  (... (fn-for-dirname (dir-n))
       (fn-for-lod (dir-dirs))
       (fn-for-lof (dir-files))))

(define (fn-for-dirname n)
  (... n))

(define (fn-for-lod lod)
  (cond [(empty? lod) (...)]
        [else
         (... (fn-for-dir (first lod))
              (fn-for-lod (rest lod)))]))

(define (fn-for-lof lof)
  (cond [(empty? lof) (...)]
        [else
         (... (fn-for-file (first lof))
              (fn-for-lof (rest lof)))]))

(define (fn-for-file file)
  (... (file-n)
       (file-s)
       (file-c)))

;
;; (3) Print out this file, and draw reference/call arrows on the types
;;     comments and function templates. Label each arrow with one of:
;;      (R) reference to another non-primitive type
;;      (SR) self-reference to the same non-primitive type
;;      (MR) reference to another non-primitive type that forms
;;           part of a mutual reference cycle
;;
;;    If you cannot print the file, hand write the above type comments
;;    on a piece of paper and label them.



;;
;; IN LAB EXERCISES:
;;
;; Using the data definitions in this file (model 3), design the
;; function how-many-dir, that consumes a Dir and produces the number
;; of files in the dir tree.
;;



;;
;; Using the data definitions in this file (model 3), design the
;; function du-dir, that consumes a Dir and produces the sum of
;; all the file sizes in the dir tree.
;;


;;
;; Design the function find? that consumes a Dir and a String and
;; produces true if a file with that name exists anywhere in the
;; directory tree.
;;

;;
;; Optional:
;; Design the function render-dir that consumes a Dir and produces
;; an Image something like that which your desktop or laptop 
;; computer might show for a directory.  First get something that
;; works and shows the tree. Wait until that works before trying
;; to make it look elegant.
;;