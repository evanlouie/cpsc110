;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-beginner-reader.ss" "lang")((modname pset5-2) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f ())))
;;; Problem Set 5
;;; Evan Louie
;;; m6d7

(require 2htdp/image)
(require 2htdp/universe)

;;;
;;;; CONSTANTS
;;;

(define MTS (square 0 "solid" "white"))

;;;
;;;; DATA DEFINITIONS
;;;

;; A Poly is one of:
;; - (cons (make-posn Integer Integer)
;;         (cons (make-posn Integer Integer)
;;               (cons (make-posn Integer Integer)
;;                     empty)))
;; - (cons (make-posn Integer Integer) Poly)
;; interp. A polygon is a list of at least three points
#;
(define (fn-for-poly poly)
  (... (first poly)
       (rest poly)))

;; ListoOfPoly is Poly is one of:
;; - empty
;; - (cons Poly ListOfPoly)
;; interp. A list of Poly
#; 
(define (fn-for-lop lop)
  (cond [(empty? lop) (...)]
        [else
         (... (fn-for-poly (first lop))
              (fn-for-lop (rest lop)))]))

;;;
;;;; FUNCTIONS
;;;
(check-expect (sort-lop (cons (list (make-posn 0 0)
                                    (make-posn 0 0)
                                    (make-posn 0 0)
                                    (make-posn 0 0)
                                    (make-posn 0 0))
                              (cons (list (make-posn 0 0)
                                          (make-posn 0 0)
                                          (make-posn 0 0))
                                    (cons (list (make-posn 0 0)
                                                (make-posn 0 0)
                                                (make-posn 0 0)
                                                (make-posn 0 0))
                                          empty))))
              (cons (list (make-posn 0 0)
                          (make-posn 0 0)
                          (make-posn 0 0))
                    (cons (list (make-posn 0 0)
                                (make-posn 0 0)
                                (make-posn 0 0)
                                (make-posn 0 0))
                          (cons (list (make-posn 0 0)
                                      (make-posn 0 0)
                                      (make-posn 0 0)
                                      (make-posn 0 0)
                                      (make-posn 0 0))
                                empty))))

;; ListOfPoly -> ListOfPoly
;; Consumes a lop, produces a sorted lop (simplest first)
(define (sort-lop lop)
  (cond [(empty? lop) empty]
        [(cons? lop) (insert-lop (first lop) 
                                 (sort-lop (rest lop)))]))

;; Poly ListOfPoly -> ListOfPoly
;; Consumes a poly and sorted lop, produces a sorted lop
(define (insert-lop p lop)
  (cond [(empty? lop) (cons p empty)]
        [else (if (simpler? p (first lop))
                  (cons p (first lop))
                  (cons (first lop) p))]))

;; Poly Poly -> Boolean
;; Consumes two poly, produces true if first is simpler
(define (simpler? p lop)
  (<= (length p) (length lop)))

